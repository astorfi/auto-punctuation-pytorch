
 I feel bad for Mozilla, I really do. Competitors and the march of time are closing in quicker than it can raise its defenses. Her crown jewel, Firefox, is feeling the squeeze as Chrome encroaches on its hard-won territory and mobile offensives have proven largely fruitless. This leaves Mozilla in an awkward position: that of out-of-touch industry stalwart. Being late to the mobile game and Apple's reluctance to open up iOS to third-party browsers has left the company boxed in. (Developers can create browsers for iOS so long as they use the same rendering engine as Safari -- a deal breaker for the Gecko-based Firefox.)
 Mozilla has responded by borrowing a page from the Google (Chrome)book: build an operating system that is essentially nothing more than a browser. Firefox OS is yet another mobile platform built entirely on HTML5 that treats websites as apps. In fact, websites are the "apps" -- there is no such thing as native code. And while there are legitimate arguments for such a model, I've yet to see it convincingly executed. We've caught glimpses of Mozilla's smartphone offspring before, but Mobile World Congress 2013 was really the proper coming out party. Finally we've been given a chance to touch it, see it action and peek at the hardware it'll be running on. Unfortunately, at this cotillion, Mozilla failed to make a good case for anyone to court its debutante.



 
 Let's start with the basic premise of Firefox OS. Like Chrome OS, there's little more here than a web browser running on top of Linux. But, unlike Mountain View's product, Mozilla has focused exclusively on mobile sites that are rarely as fast, stable or functional as their desktop counterparts. Ultimately the web-as-app approach doesn't work particularly well when you're trying to deliver a rich and smooth experience, especially on mobile. As Facebook has discovered, there are serious performance issues with HTML5. Mark Zuckerberg even went so far as to say that relying on it for mobile apps was one of the "biggest mistakes" the company has ever made. It doesn't help matters when you're trying to render that inefficient code on extremely low-end hardware, like the sub-1GHz single-core chip inside the ZTE Open.

  The web-as-app approach doesn't work particularly well when you're trying to deliver a rich and smooth experience, especially on mobile.

 The issues are only exacerbated when faced with limited bandwidth. The first batch of Firefox phones won't be terribly different from the original iPhone in functionality, though, they will have significantly faster data connections. That landmark device launched without support for third-party apps, as you might recall, and Steve Jobs famously told developers they could start creating applications months before the phone officially went on sale, because they were simply mobile websites. According to his biography, Jobs fought tooth and nail against having native applications on the iPhone, but eventually he came around because the experience provided by web apps was, at best, subpar. Granted, it relied on Cingular's painful EDGE network, but things are only marginally better on 3G or 4G as web apps have become more complex.

 American consumers may be more demanding than those in the emerging markets that Mozilla is targeting, but the wireless infrastructure in South Asia and Africa is nowhere near as robust as it is in the Western world. This poses significant problems for the fledgling OS since it relies on constant connectivity to deliver information. Sure, some services can cache data locally for offline use, but that's a feature of HTML5 that has yet to be widely embraced by devs. Mozilla thankfully has Nokia offering some support for the disconnected with its maps, but most "apps" (and Mozilla's insistence on calling them that is frustrating) will require an internet connection to function.

 
 Sparse coverage and slow speeds will pose significant usability issues for these new consumers, but perhaps an even bigger stumbling block will be price. While we don't know how much some of these phones will cost, the moderately specced Geeksphone Peak is expected to hit retail for around €200. Lower-end Android devices can be had for less than €100 at this point without a subsidy, such as the Galaxy Y and the Optimus L3 (both of which retail for around £50 or €60, through Carphone Warehouse). More important though, is the total cost of ownership. A device that relies so heavily on the web apps, will inevitably suck down a significant amount of data. Sure, it'll be far less than if you were hooked up to Spotify and Netflix all day, but it will likely be more than if most of your applications were installed locally. And in many of these nations, any data plan (not to mention one with a large data cap) is prohibitively expensive for much of the population. For example, in India, the median annual per capita purchasing power parity (PPP) is $3,608 according to the International Monetary Fund. For those that don't know, PPP is a way of measuring the relative value of currencies, accounting for things like cost of living. If you had to live on $3,500 a year, I doubt a smartphone data plan would be high on your list of must-haves.

  The unfortunate truth is that Firefox OS just doesn't offer anything that consumers in developed markets want. Nor anything those in emerging markets need.

 Mozilla's CEO Gary Kovacs shared a stage at some point with his counterparts at Ooredoo (formerly Qtel) and Bharti Airtel -- two operators that could find themselves carrying Firefox OS devices. But, while Dr. Nasser Marafih and Manoj Kohli spent significant time talking about the importance of increasing wireless broadband penetration during the shared keynote, they also harped on the importance of using available bandwidth efficiently. That does mean freeing up particular frequencies for 3G and 4G use, but it also means WiFi offloading and effectively managing data consumption on the device side. Nokia's Xpress Browser and Opera Mini do this through extensive use of compression that relies on a middleman server operated by those companies. It's not unthinkable that Firefox OS could use a similar technique on its "apps" but we've heard nothing about it or the creation of the necessary infrastructure from Mozilla. And if the phone is going to literally be nothing more than a portal to the web, then it's going to be a tough sell for those that have to subsist on a very strict data diet.

 The unfortunate truth is that Firefox OS just doesn't offer anything that consumers in developed markets want. Nor anything those in emerging markets need. Mozilla can tell us "the web is the ecosystem" or encourage us to "blaze your own path," but a budget Android handset does all the same things and more. During their shared keynote Kohli turned to Stephen Elop and told him he'd like to see $30 smartphones. If Firefox OS has any chance of succeeding, it will have to deliver a rock-solid browsing experience at prices near that and figure out a way to efficiently manage data consumption. Most importantly, it will need to learn the same lesson Apple and Facebook have -- HTML5 "apps" just don't cut it.

 Update: There appears to be some confusion over Firefox OS and the state of offline apps. As noted in the editorial, it is possible for HTML5 apps to be downloaded and installed locally. Nokia's mapping solution is one of the confirmed examples. However, many apps are not "packaged" (in Mozilla's terminology) and installable. The vast majority of the tens-of-thousands of apps referenced by CEO Gary Kovacs during Mozilla's big event at Mobile World Congress are "hosted." In other words, they're webapps -- which Mozilla is using to pad its marketplace. (This is almost exactly what you're treated to when exploring the Chrome Web Store. )

 The "packaged" versions of the apps are, essentially, just websites zipped up in an archive. Which carries its own set of issues. As previously mentioned, HTML5 is widely perceived a suffering from performance issues when compared to native apps. While some have claimed this is because of poorly constructed code, and should not be laid at the feet of the standard, it appears that many devs struggle to produce efficient products using it. And if said developers continue to struggle with HTML5 it may be tough to convince them to embrace it the way they have native code. The evolutionary take on HTML may make it simple to create cross-platform programs, but the differences in rendering engines and the layer of abstraction itself make it difficult to optimize performance for all of them. And while Mozilla has created hooks for apps to get deeper access to the hardware, it remains difficult to implement many of the more robust features users have come to expect from applications using HTML5. 

