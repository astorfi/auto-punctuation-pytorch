
 Apple's already got a veritable novella describing things you can't do with the iPhone as a developer -- create apps that execute their own code is the biggie, obviously, blocking technologies Flash and Java in the absence of a loophole -- but it seems they've locked down the ecosystem just a little further today with the release of the iPhone OS 4 beta SDK. Check out this snippet from the developer's agreement:
Applications may only use Documented APIs in the manner prescribed by Apple and must not use or call any private APIs. Applications must be originally written in Objective-C, C, C++, or JavaScript as executed by the iPhone OS WebKit engine, and only code written in C, C++, and Objective-C may compile and directly link against the Documented APIs (e.g., Applications that link to Documented APIs through an intermediary translation or compatibility layer or tool are prohibited).
What does that mean, exactly? Well, it means that technologies like Adobe's iPhone compiler in Flash CS5 won't be allowed, simply because the source code of the app that you're writing isn't in a language Apple's comfortable with. The compiler had been seen as a potential boon for Flash devs that had already been blocked out of the iPhone ecosystem for lack of a true Flash player, but Apple's found a way to block even this workaround -- technically you don't need to be using Apple's own tools, but you've got be using one of three variants of a single programming language. It's hard to say why Apple cares, exactly, but we suspect that the company would have to analyze your app pretty closely to detect variances in how the compiler produced your machine code in order to determine that you'd violated the rule.

This could be a blow to publishers -- Cond√© Nast included -- who'd been banking on Adobe Air to lead the digital push, since those guys presumably won't be able to bring their issues to the iPhone (and, more importantly, the iPad) without violating the terms of Apple's agreement. Protectionism is a core element of the iPhone's success, in Apple's view -- but ultimately, this might come out as a decision that's difficult to defend, unnecessarily sours publishers to the platform, and turns Flash devs' heads just a little grayer than they already were.
      

 